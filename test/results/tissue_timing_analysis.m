close all 
clear all

build_types = {'IntelProductionCvode'};
               % 'GccOptNative',...
               %'IntelProduction',...
               %,'Intel'...
               %,'GccOpt'...
               %,'debug'};
           
% NB indexed as 0, 1, ..., 8 in the results file
% so we need to add one to those numbers to get the
% correct name!
solvers = {'CVODE AJ', 'CVODE NJ', 'F. Euler', ...         
        'B. Euler','RK2','RK4','Rush Larsen',...            
        'GRL1','GRL2'};
    
model_names = {'Beeler Reuter 1977'; 'Grandi 2010'; 'Iyer 2007'; ...
    'Luo Rudy 1991'; 'Nygren 1998'; 'Shannon 2004'; 'ten Tusscher 2004'};

print_latex_table = true;
look_at_fake_pde_step_timings = false;

% Compile all the results into a table.
all_results = [];

for b=1:length(build_types)
    d = importdata([build_types{b} '_timings_tissue.txt']);

    % Get the raw data out
    model = d.textdata;
    solver = d.data(:,1);
    optimised = d.data(:,2);
    pde_timesteps = d.data(:,3);
    times = d.data(:,5);
    clear d

    if b==1 % This file recently updated to include all the options, this 'if' could go if all updated to the same.
        model_list = unique(model);
        solver_list = unique(solver);
        assert(length(solver_list)==length(solvers))
        
        % Find out how many ODEs each model has from their summary files
        for i=1:length(model_list)
            d = importdata(['..' filesep 'data/reference_traces/' model_list{i} '.summary']);
            model_list_ODEs(i) = d.data(1);
        end
        
        optimised_list = unique(optimised);
        assert(length(optimised_list)==2)
        
        pde_list = unique(pde_timesteps);
        assert(length(pde_list)==2)
    end
    
    for model_idx = 1:length(model_list)
        indices_this_model = find(strcmp(model,model_list{model_idx}));
        for solver_idx = 1:length(solver_list)
            indices_this_solver = find(solver==solver_list(solver_idx));
            index_this_combination = intersect(indices_this_model,indices_this_solver);
            for optimised_idx = 1:length(optimised_list)
                indices_this_optimisation = find(optimised==optimised_list(optimised_idx));
                                
                for pde_timestep_idx = 1:length(pde_list)
                    indices_this_timestep = find(pde_timesteps==pde_list(pde_timestep_idx));
                    index_complete_combination = intersect(indices_this_optimisation,index_this_combination);
                    index_complete_combination = intersect(index_complete_combination,indices_this_timestep);
                    
                    if (~isempty(index_complete_combination))
                        assert(length(index_complete_combination)==1)
                        all_results(model_idx, solver_idx,b, optimised_idx, pde_timestep_idx) = times(index_complete_combination);
                    else
                        all_results(model_idx, solver_idx,b, optimised_idx, pde_timestep_idx) = -1;
                    end
                end
            end
        end
    end            
        
    if print_latex_table
        % Now write out a table in latex format

        for optimised_idx = 1:length(optimised_list)
            
            for pde_timestep_idx = 1:length(pde_list)
        
                max_time = max(max(all_results(b,:,:,optimised_idx,pde_timestep_idx))); 
                colours = colormap(autumn(100));
                fprintf('\n\n')
                % Print another summary table for O'hara colour coded.
                fprintf('%% This table was autogenerated by timing_analysis.m, so don''t edit it here, edit that instead!\n')
                fprintf('%% Please remember to add \\use{multirow} to your document preamble in order to support multirow cells\n');
                fprintf('%% Booktabs require to add \\usepackage{booktabs} to your document preamble.\n')
                fprintf('\\begin{table}[htb]\n')
                fprintf('\\begin{center}\n')
                fprintf('\\textbf{\\refstepcounter{table}\\label{Tab:Timings%s} Table \\arabic{table}.}{ Wall time (s) for 10s of simulation for the %s build }\\\\\n',...
                    build_types{b}, put_underscores_in_latex(build_types{b}))
                fprintf('\\vspace{0.2cm}\n')
                fprintf('\\processtable{ }\n')
                fprintf('{\\begin{tabular}{@{}clccccccccccc@{}}\n')
                fprintf('\\toprule\n')
                fprintf('Model & ')
                for solver_idx=1:1:length(solver_list)
                    fprintf(' %s ',solvers{solver_list(solver_idx)+1})
                    if solver_idx < length(solver_list)
                        fprintf('&')
                    end
                end
                fprintf(' \\\\\n \\midrule\n')
                for model_idx=1:length(model_list)
                    % Print model name
                    fprintf('%s & ',put_underscores_in_latex(model_list{model_idx}))
                    % Print timings
                    for solver_idx=1:1:length(solver_list)
                        if (all_results(model_idx, solver_idx,b) > 0)
                            % Real result
                            %hts = all_results(b, model_idx, solver_idx)./max_time;
                            %rgb = colours(floor(hts)+1,:);
                            %fprintf('\\cellcolor[rgb]{%f,%f,%f} %3.0f ',rgb(1),rgb(2),rgb(3),hts)
                            fprintf('%4.3f ',all_results(model_idx, solver_idx,b, optimised_idx,pde_timestep_idx))
                        else
                            % Wasn't run
                            %fprintf('\\cellcolor[rgb]{1,1,1} -- ')
                            fprintf(' --- ')
                        end            
                        if solver_idx < length(solver_list)
                            fprintf('&')
                        end
                    end
                    if model_idx < length(model_list)
                        fprintf('\\\\ \\midrule\n')
                    end
                end
                fprintf('\\\\ \n\\botrule\n')
                fprintf('\\end{tabular}}{}\n')
                fprintf('\\end{center}\n')
                fprintf('\\end{table}\n')  
            end
        end
    end


    if b==1 % Use the same ordering, regardless of build.
        % Rank the models in terms of how fast they are
        % for Rush Rarsen
        [~, ordering] = sort(all_results(:, 1, b, 1, 2));
        for i=1:length(ordering)
            fprintf('%i Model:%s\n',i,model_list{ordering(i)})
        end
    end

    figure('Units','normalized','Position',[.05 .05 .3 .3])
    for pde_idx = 1:2

        subplot(2,1,pde_idx)
        color_idx = 1;
        colorOrder = get(gca, 'ColorOrder');

        legend_idx = 0;
        for i=1:length(solver_list)
            color_idx = color_idx+1;
            if i<8 
                linestyle = '-';
            else
                linestyle = '--';
            end    
            % Plot normal ones
            order = find(all_results(ordering, i, b, 2, pde_idx)>0);  
            if (~isempty(order))
                semilogy(1:length(order), all_results(ordering(order), i, b, 1, pde_idx), ...
                    'Color',colorOrder(mod(color_idx,7)+1,:),...
                    'Marker','.','LineStyle',linestyle)
                hold all
                legend_idx = legend_idx + 1;
                solvers_legend{legend_idx} = solvers{solver_list(i)+1};
            end

    %         % Plot optimised ones
    %         order = find(all_results(ordering, i, b, 2, pde_idx)>0);
    %         if (~isempty(order))
    %             semilogy(1:length(order), all_results(ordering(order), i, b, 2, pde_idx), ...
    %                 'Color',colorOrder(mod(color_idx,7)+1,:),...
    %                 'Marker','.','LineStyle','--')
    %             hold all
    %             legend_idx = legend_idx + 1;
    %             solvers_legend{legend_idx} = [solvers{solver_list(i)+1} ' Opt'];
    %         end
        end
        title([build_types{b} ' benchmarking for PDE dt = ' num2str(pde_list(pde_idx))])
        legend(solvers_legend,'Location','EastOutside')
        ylabel('Wall time taken for 500ms')
        ylim([1 1e3])

        set(gca,'XTick',1:length(model_list))
        if (pde_idx==2)
            set(gca,'XTickLabel',model_names(ordering))
            xticklabel_rotate([],90)
        else
            set(gca,'XTickLabel',{''})
        end
    end
end




