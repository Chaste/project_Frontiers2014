close all 
clear all

build_types = {'IntelProductionCvode',...
               'IntelProduction',...
               'Intel',...
               'GccOptNative',...
               'GccOpt',...
               'debug'};
           
solvers = {'CVODE AJ', 'CVODE NJ', 'F. Euler', ...         
        'B. Euler','RK2','RK4','Rush Larsen',...            
        'GRL1','GRL2'};
    
print_latex_table = false;
look_at_fake_pde_step_timings = false;

% Compile all the results into a table.
all_results = [];
    
for b=1:length(build_types)

    d = importdata([build_types{b} '_timings.txt']);

    % Get the raw data out
    model = d.textdata;
    solver = d.data(:,1);
    optimised = d.data(:,2);
    times = d.data(:,3);
    clear d

    model_list = unique(model);
    solver_list = unique(solver);
    
    for model_idx = 1:length(model_list)
        indices_this_model = find(strcmp(model,model_list{model_idx}));
        for solver_idx = 1:length(solver_list)
            indices_this_solver = find(solver==solver_list(solver_idx));
            index_this_combination = intersect(indices_this_model,indices_this_solver);
            if (~isempty(index_this_combination))
                assert(length(index_this_combination)==1)
                all_results(model_idx, solver_idx,b) = times(index_this_combination);
            else
                all_results(model_idx, solver_idx,b) = -1;
            end
        end
    end            
        
    if print_latex_table
        % Now write out a table in latex format

        max_time = max(max(all_results(b,:,:))); 
        colours = colormap(autumn(100));

        % Print another summary table for O'hara colour coded.
        fprintf('%% This table was autogenerated by timing_analysis.m, so don''t edit it here, edit that instead!\n')
        fprintf('%% Please remember to add \\use{multirow} to your document preamble in order to support multirow cells\n');
        fprintf('%% Booktabs require to add \\usepackage{booktabs} to your document preamble.\n')
        fprintf('\\begin{table}[htb]\n')
        fprintf('\\begin{center}\n')
        fprintf('\\textbf{\\refstepcounter{table}\\label{Tab:Timings%s} Table \\arabic{table}.}{ Wall time (s) for 10s of simulation for the %s build }\\\\\n',...
            build_types{b}, put_underscores_in_latex(build_types{b}))
        fprintf('\\vspace{0.2cm}\n')
        fprintf('\\processtable{ }\n')
        fprintf('{\\begin{tabular}{@{}clccccccccccc@{}}\n')
        fprintf('\\toprule\n')
        fprintf('Model & ')
        for solver_idx=1:1:length(solver_list)
            fprintf(' %s ',solvers{solver_list(solver_idx)+1})
            if solver_idx < length(solver_list)
                fprintf('&')
            end
        end
        fprintf(' \\\\\n \\midrule\n')
        for model_idx=1:length(model_list)
            % Print model name
            fprintf('%s & ',put_underscores_in_latex(model_list{model_idx}))
            % Print timings
            for solver_idx=1:1:length(solver_list)
                if (all_results(model_idx, solver_idx,b) > 0)
                    % Real result
                    %hts = all_results(b, model_idx, solver_idx)./max_time;
                    %rgb = colours(floor(hts)+1,:);
                    %fprintf('\\cellcolor[rgb]{%f,%f,%f} %3.0f ',rgb(1),rgb(2),rgb(3),hts)
                    fprintf('%4.3f ',all_results(model_idx, solver_idx,b))
                else
                    % Wasn't run
                    %fprintf('\\cellcolor[rgb]{1,1,1} -- ')
                    fprintf(' --- ')
                end            
                if solver_idx < length(solver_list)
                    fprintf('&')
                end
            end
            if model_idx < length(model_list)
                fprintf('\\\\ \\midrule\n')
            end
        end
        fprintf('\\\\ \n\\botrule\n')
        fprintf('\\end{tabular}}{}\n')
        fprintf('\\end{center}\n')
        fprintf('\\end{table}\n')  
    end
end

% Rank the models in terms of how fast they are
% in our best case - intel with intel cvode, for cvode numeric J
[~, ordering] = sort(all_results(:, 2, 1));
for i=1:length(ordering)
    fprintf('%i Model:%s\n',i,model_list{ordering(i)})
end

analytic_result_rows = find(all_results(ordering, 1, 1)>0);

figure
for i=1:length(build_types)
    semilogy(all_results(ordering, 2, i), '.-')
    hold all
end
xlabel('Model index')
ylabel('Wall time taken for 10 paces (s)')
title('Compiler benchmarking with CVODE NJ')
legend(build_types,'Location','NorthWest')
xlim([1 64])
% NB - We've removed the last model - clancy rudy, as it is mental and 
% obscures anything you can say about the build times.

figure
semilogy(analytic_result_rows,all_results(ordering(analytic_result_rows), 1, 1), '.-')
xlabel('Model indices, ordered by time taken using CVODE NJ')
ylabel('Wall time taken for 10 paces (s)')
hold all
for i=2:8
    if i<8 
        linestyle = '-'
    else
        linestyle = '--'
    end
    semilogy(all_results(ordering, i, 1), ['.' linestyle])
end
title('Solver benchmarking')
legend(solvers{solver_list+1},'Location','EastOutside')
xlim([1 65]) % Include Clancy-Rudy again.


figure
semilogy(analytic_result_rows,all_results(ordering(analytic_result_rows), 1, 1), '.-')
xlabel('Model indices ordered by time taken for each solver')
ylabel('Wall time taken for 10 paces (s)')
hold all
for i=2:8
    [~, ordering] = sort(all_results(:, i, 1));
    if i<8 
        linestyle = '-'
    else
        linestyle = '--'
    end
    semilogy(all_results(ordering, i, 1), ['.' linestyle])
end
title('Solver benchmarking')
legend(solvers{solver_list+1},'Location','EastOutside')
xlim([1 65]) % Include Clancy-Rudy again.


if look_at_fake_pde_step_timings
    % Compile all the results into a table.
    all_results_pde = [];
    
    for b=1:length(build_types)

        d = importdata([build_types{b} '_timings_pde.txt']);

        % Get the raw data out
        model = d.textdata;
        solver = d.data(:,1);
        optimised = d.data(:,2);
        pde_time_steps = d.data(:,3);
        times = d.data(:,4);
        clear d

        model_list = unique(model);
        solver_list = unique(solver);
        pde_list = unique(pde_time_steps);


        for pde_step_idx = 1:length(pde_list)

            for model_idx = 1:length(model_list)
                indices_this_model = find(strcmp(model,model_list{model_idx}));
                for solver_idx = 1:length(solver_list)
                    indices_this_solver = find(solver==solver_list(solver_idx));
                    indices_this_pde_step = find(pde_time_steps==pde_list(pde_step_idx));
                    index_this_combination = intersect(indices_this_model,indices_this_solver);
                    index_this_combination = intersect(index_this_combination,indices_this_pde_step);
                    if (~isempty(index_this_combination))
                        assert(length(index_this_combination)==1)
                        all_results_pde(model_idx, solver_idx, b) = times(index_this_combination);
                    else
                        all_results_pde(model_idx, solver_idx, b) = -1;
                    end
                end
            end
            fprintf('PDE time step = %3.3f\n',pde_list(pde_step_idx))
            all_results_pde   
        end    
    end
end
